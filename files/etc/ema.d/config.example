# ----------------------------------------------------------------------
# Copyright (c) 2014 Rafael Gonzalez.
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# ----------------------------------------------------------------------

#========================================================================#
#                      Generic configuration Data                        #
#========================================================================#
[ema]

# Log File settings
log_file = /var/log/ema.log

# component log level (debug, info, warn, error, critical)
log_level = debug

# The host computer (i.ea Raspberry Pi)  has a buli-in RTC
host_rtc = no

# Number of retries to detect an EMA
# Usually set to 3, set to 0 for debugging purposes
nretries = 0

#------------------------------------------------------------------------#

[serial]
# Serial Port Settings. 

# Baud rate supported only 9600 & 57600
# As an alternative a tcp:<host>:port can be specified
# Not reloadable property
endpoint = serial:/dev/ttyUSB0:9600

# Perform syncronization of calibration constants at startup
# (except RTC and Aux Relay)
sync = True

# Upload period (in seconds).
# EMA current state measurements upload period
# Intermediate samples are discarded.
upload_period = 60

# component log level (debug, info, warn, error, critical)
log_level = debug

# log serial protocol messages from/to EMA ?
log_messages = yes

#------------------------------------------------------------------------#
[internet]
# Internet connectivity detection
# It is useful to know when the program has no internet connectivity
# If no network connectivity, then the program:
# - will synchronize its clock from EMA RTC (insteado of the other way round)
# - will execute an script (i.e. probably to shut the host down)

# 3 Sites to probe (no more, no less)
site1 = http://www.google.es
site2 = http://www.facebook.es
site3 = http://www.twitter.es

# Number of probes
attempts = 3

# Interval (seconds) between probes
interval = 30

# component log level (debug, info, warn, error, critical)
log_level = debug

#------------------------------------------------------------------------#
[scripts]
# Internet connectivity detection
# It is useful to know when the program has no internet connectivity
# If no network connectivity, then the program:
# - will synchronize its clock from EMA RTC (insteado of the other way round)
# - will execute an script (i.e. probably to shut the host down)


# List of comma separated scripts to execute on change of roof relay switch 
# Each script should show the full path. 
# Leave empty if not used
roof_relay = 

# Format string for the script arguments
roof_relay_args = "--status %s --reason %s"

# Script mode: (Never, Once, Many)
# When launched mutiple times, EMA server does not lauch a script
# till the previous run is over
roof_relay_mode = Many


# List of comma separated scripts to execute on change of aux relay switch 
# Each script should show the full path. 
# Leave empty if not used
aux_relay = 

# Format string for the script arguments
aux_relay_args = "--status %s --reason %s"

# Script mode: (Never, Once, Many)
# When launched mutiple times, EMA server does not lauch a script
# till the previous run is over
aux_relay_mode = Never

# List of comma separated scripts to execute on low voltage 
# Each script should show the full path. 
# Leave empty if not used
low_voltage = /home/pi/nto/ema/scripts/volt-script

# Format string for the script arguments
low_voltage_args = '--voltage %.1f --threshold %.1f --size %d'

# Script mode: (Never, Once, Many)
# When launched mutiple times, EMA server does not lauch a script
# till the previous run is over
low_voltage_mode = Once

# List of comma separated scripts to execute when
# no internet connection has been detected 
# Each script should show the full path. 
# Leave empty if not used
no_internet =

# Format string for the script arguments
no_internet_args = ''

# Script mode: (Never, Once, Many)
# When launched mutiple times, EMA server does not lauch a script
# till the previous run is over
no_internet_mode = Once


# List of comma separated scripts to execute when
# the current time reaches the 10%, 30%, 50%, 70%, 90% active interval
# Each script should show the full path. 
# Leave empty if not used
active10 =
active30 =
active50 =
active70 =
active90 =

# Script mode: (Never, Once, Many)
# When launched mutiple times, EMA server does not lauch a script
# till the previous run is over
active10_mode = Once
active10_args = '--start %s --end %s'
active30_mode = Once
active30_args = '--start %s --end %s'
active50_mode = Once
active50_args = '--start %s --end %s'
active70_mode = Once
active70_args = '--start %s --end %s'
active90_mode = Once
active90_args = '--start %s --end %s'

# component log level (debug, info, warn, error, critical)
log_level = debug

#------------------------------------------------------------------------#

[mqtt]
# MQTT Client config

# The channel string used as the station id in topics (i.e EMA/<channel>/#)
# and also as part of the client_id when connecting to the broker.
channel = foo

# Username/password credentials
# leave blank if not needed
# non reloadable properies
username = 
password = 

# Keepalive connection (in seconds)
# Not reloadable property
keepalive = 60

# Broker to connect
broker = tcp:test.mosquitto.org:1883

# component log level (debug, info, warn, error, critical)
log_level = debug

#------------------------------------------------------------------------#

[scheduler]
# The scheduler keeps a list of active window to do things like
# sending historic 24 data and programming the aux relay for
# powering on/off
# At minimun, one active interval should be defined and should be at least 
# 15 minutes long


# List of comma-separated intervals hh1:mm1-hh2:mm2
# Historic data is dumped at the interval midpoint
# Host computer powers off at interval end 
# if and only if the service is started in poweroff mode either by :
#    sudo service ema start poweroff 
#    sudo service ema restart poweroff
#
# Time given in UTC Time.
intervals = 12:00-12:15,20:00-20:15

# component log level (debug, info, warn, error, critical)
log_level = INFO


#========================================================================#
#                      Sensor configuration Data                         #
#========================================================================#

#------------------------------------------------------------------------#

[voltmeter]
# sync parameters
sync = no

# Volt offset [V]
# Offset to ADC for proper calibration
offset = 0.0

# Low voltage threshold [V]
# This threshold is managed by the EMA hardware and closes relays
# if relays are set in automatic mode
threshold = 11.8 

# The EMA service will execute a script if the average voltage
# value reported by EMA in status messages during 'volt_time' 
# seconds falls below 'volt_thres' + 'volt_delta'

# Low voltage thrshold delta [V]
# Volts above vlot_threshold to allow a safety marging for
# emeregency actions before relays switch off
delta = 0.2

#------------------------------------------------------------------------#
# Mechanical Anemometer
[anemometer]

# sync parameters
sync = no

# Calibration value to yield readings in Km/h or arm length [mm] in simple
calibration = 36

# Anemometer type. Allowed values: (TX20, Simple)
model = TX20

# Theshold for instataneous wind speed [Km/h]
# instantaneous wind speed > wind_thres will close the roof relay
threshold = 20

# Theshold for average wind speed [Km/h] made on 10 min. period
# avergae wind speed > wind_thres10 will close the roof relay
ave_threshold = 66

#------------------------------------------------------------------------#

[barometer]

# sync parameters
sync = no

# Observer height above sea level [m]
height = 700

# Barometer offeset [mBar]
offset = -19


#------------------------------------------------------------------------#

# Peltier-based cloud sensor
[cloudsensor]

# sync parameters
sync = no

# Adj. Gain
gain = 1.0

# Threshold to close roof relay [%]
threshold = 67

#------------------------------------------------------------------------#

# Unihedron-like, wide field photometer measuring night visual magnitude.
[photometer]

# sync parameters
sync = no

# Calibration offset [visual mag.]
offset = -0.5

# Threshold to close roof relay [visual mag.]
threshold  = 10.5


#------------------------------------------------------------------------#
# Pluviometer (Rain Gauge) sensor
[pluviometer]

# sync parameters
sync = no

# Constant to give readiongs in litres.
calibration = 124

#------------------------------------------------------------------------#
# Pyranometer device, measuring solar radiation
[pyranometer]

# sync parameters
sync = no

gain   = 1.6
offset = 0


#------------------------------------------------------------------------#

# Rain detection sensor
[rainsensor]

# sync parameters
sync = no

# Rain threshold to close roof (0..9) [%]
threshold = 1


#------------------------------------------------------------------------#

# Themometer measuring ambient Temperature and dew point 
[thermometer]

# sync parameters
sync = no

# Threshold temperature above dew point.
# If ambient temperature < (dew point + delta_threshold)
# the roof relay will close.
delta_threshold = 5.0


#------------------------------------------------------------------------#

[watchdog]

# sync parameters
sync = no

# EMA keep alive limit [seconds]
# When times out, the roof relay is switched off
# The program sends a keepalive message every period/2 seconds
period = 200

#------------------------------------------------------------------------#

[rtc]

# Max difference between EMA and host computer 
# to synchronize time [seconds].
max_drift  = 2

#========================================================================#
#                      Actuator configuration Data                       #
#========================================================================#

# Auxiliar relay
[aux_relay]

# sync parameters
sync = no

# Flag. Open/close relay mode 
# 'Auto'   = automatic based on dew point
# 'Manual' = manual, by explicit commands
# 'Timer/On'   = Timed, with On/Off hour:minute
# 'Timer/Off'  = Timed, with On/Off hour:minute
mode = Manual


#------------------------------------------------------------------------#
# Roof relay
[roof_relay]

# sync parameters
sync = no

 
#------------------------------------------------------------------------#
# Thermopile sensor (alternative way to detect clouds)
[THERMOPILE]

# Where to publish measurements
# Comma list separated values 
# Allowed values: html, mqtt  (or just leave a blank line)
thermop_publish_where = mqtt,html

# What to publish: current, average or both
# comma-separated list 
thermop_publish_what = current,average        

# component log level (debug, info, warn, error, critical)
thermop_log = INFO

