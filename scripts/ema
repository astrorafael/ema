#!/usr/bin/env python

# ----------------------------------------------------------------------
# Copyright (c) 2014 Rafael Gonzalez.
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# ----------------------------------------------------------------------

# ========================== DESIGN NOTES ==============================
# This file implements the EMA command line client interface
# that sends commands to EMA Server.
# This command line interface only works in the same host
# as the EMA server.
#
# Surpisingly, the Event driven Server frameweork that I wrote for EMA,
# (server.py) is also able to handle synchronous I/O 
# thanks to its step() method and a bit of wait logic 
# defined in this file
#
# The run() method is completely overriden to performe CLI processing
# and comman exceution and the exists. No infinite loop is needed.
#
# Howevr, I could not reuse the Command class that I wrote for the
# EMA Server. It has different scope. I ended up writing a sibling
# Command class for the client, that has many lines of code in common
# but they ae not equal.
# ======================================================================

import argparse
import logging
import os
import os.path
import sys
import re
import datetime
# Only Python 2
import ConfigParser

import ema.logger
from ema.udpdriver import UDPDriver
from ema.server    import Server, Alarmable
from ema.command   import COMMAND
from ema.default   import LOGLEVEL, CONFIGFILE, VERSION

log = logging.getLogger(os.path.basename(sys.argv[0]))

def setLogLevel(level):
	log.setLevel(level)



class EMAClient(Server):

	def __init__(self):
		Server.__init__(self)
		self.cli()
		self.readConfig(self.args.file or CONFIGFILE)
		self.received = False
		self.commandList = []	# command list

	def cli(self):
		'''Create the command line interface options'''
		self.parser = argparse.ArgumentParser(prog='ema')
		self.parser.add_argument('-f', '--file', help='config file path', metavar='<config file>', type=str, action='store')
		self.parser.add_argument('--version', action='version', version='%s' % VERSION)
		subparsers = self.parser.add_subparsers(help='available subcommands')

		# Subparser for Roof Relay Commands
		roof_parser = subparsers.add_parser('roof', help='roof relay options')
		group = roof_parser.add_mutually_exclusive_group()
		group.add_argument('-o' , '--open',  action='store_true', help='force opening roof relay')
		group.add_argument('-c' , '--close', action='store_true', help='force closing roof relay')

		#Subparser for Aux Relay commands
		aux_parser = subparsers.add_parser('aux', help='aux relay options')
		group = aux_parser.add_mutually_exclusive_group()
		group.add_argument('-o' , '--open',  action='store_true', help='force opening aux relay')
		group.add_argument('-c' , '--close', action='store_true', help='force closing aux relay')
		group.add_argument('-t' , '--time-off', type=str, action='store', metavar='HH:MM', help='specify aux relay switch off time in timer mode')
		group.add_argument('-x' , '--extend',   type=int, action='store', metavar='N', help='extend  aux relay switch off time by [+-] N minutes')
		self.args = self.parser.parse_args()

	def readConfig(self, configfile):
		'''Note Tx & RX ports are swapped in reading the config fie'''
		if not (configfile != None and os.path.exists(configfile)):
			log.error("No configuration file found: %s. Bye!",configfile)
			sys.exit(1)
		log.info("Loading configuration from %s" % configfile)
		config = ConfigParser.ConfigParser()
		config.optionxform = str
		config.read(configfile)
		self.mcast_ip  = config.get("UDP", "mcast_ip")
		self.tx_port   = config.getint("UDP", "udp_rx_port")
		self.rx_port   = config.getint("UDP", "udp_tx_port")
		self.multicast = config.getboolean("UDP", "mcast_enabled")
		self.udpdriver = UDPDriver(self.mcast_ip, self.rx_port, self.tx_port)
		self.udpdriver.addHandler(self)
		self.addReadable(self.udpdriver)



	def onUDPMessage(self, message, origin):
		'''
		Handle incoming commands from UDP driver.
		'''
		log.debug("Recibido Mensage UDP %s from %s", message, origin)
		for handler in self.commandList:
			if handler.onResponseDo(message):
				break
		


	def handleExternal(self, message):
		'''Handler for requests from EMA server'''
		

	# --------------------------
	# Handling commands from UDP
	# --------------------------

	def addExternal(self, obj):
		'''
		Add an external command request to the lists of pending commands.
		'''
		self.commandList.append(obj)


	def delExternal(self, obj):
		'''
		Delete an external command request from the lists of pending commands.
		'''
		self.commandList.pop(self.commandList.index(obj))


	def wait(self, cmd):
		'''Performs synchronous wait for commands to complete'''
		ok, timeout = False, False
		while not ok and not timeout:
			ok, timeout = cmd.status()
			self.step(1)
		resp = ''.join(cmd.responses())
		if ok and timeout:
			print("Ths should never happen ...")
			sys.exit()
		if not ok and timeout:
			print("Command %s %s => %s [NOK]" % (cmd.name, cmd.message, resp))
			sys.exit()
		log.debug('(ok, t) = (%s,%s)',ok,timeout)
		print("Command %s %s => %s [OK]" % (cmd.name, cmd.message, resp))
		

	def roof_commands(self, roof):
		'''Commands for Roof Relay'''
		if not roof.close and not roof.open:
			print("Sorry, no Roof Status comamnd is available")
			return
		if roof.open:
			cmd = Command(self, **COMMAND[0])
			cmd.request('(X007)','localhost')
			self.wait(cmd)
			return
		if roof.close: # close roof
			cmd = Command(self, **COMMAND[1])
			cmd.request('(X000)','localhost')
			self.wait(cmd)
			return


	def aux_commands(self, aux):
		'''Commands for Auxiliar Relay'''
		# get Aux Relay Status
		if not aux.close and not aux.open and not aux.time_off and not aux.extend:
			cmd = Command(self, **COMMAND[8])
			cmd.request('(s)','localhost')
			self.wait(cmd)
			return
		if aux.open: 
			cmd = Command(self, **COMMAND[2])
			cmd.request('(S005)','localhost')
			self.wait(cmd)
			return
		if aux.close:
			cmd = Command(self, **COMMAND[3])
			cmd.request('(S004)','localhost')
			self.wait(cmd)
			return
		if aux.time_off:
			cmd = Command(self, **COMMAND[4])
			cmd.request('(S009)','localhost')
			self.wait(cmd)
			pat = re.compile('(\d{2}):(\d{2})$')
			matchobj = pat.search(aux.time_off)
			if not matchobj:
				print("Error: %s does not match HH:MM pattern" % args.time_off)
				return
			cmd = Command(self, **COMMAND[7])
			msg = '(Sof%s%s)' % (matchobj.group(1), matchobj.group(2))
			cmd.request(msg, 'localhost')
			self.wait(cmd)
			off,  = cmd.responses()
			hh = int(off[4:6])
			mm = int(off[6:8])
			print("Aux Relay Switch Off set to %02d:%02d" % (hh,mm) )
			return
		if aux.extend:
			cmd = Command(self, **COMMAND[4])
			cmd.request('(S009)','localhost')
			self.wait(cmd)
			cmd = Command(self, **COMMAND[8])
			cmd.request('(s)','localhost')
			self.wait(cmd)
			mode, on, off = cmd.responses()
			hh = int(off[4:6])
			mm = int(off[6:8])
			delta = datetime.timedelta(seconds=60*aux.extend)
			t = datetime.datetime.utcnow().replace(hour=hh,minute=mm,second=0,microsecond=0)
			t += delta
			msg = t.strftime("(Sof%H%M)")
			cmd = Command(self, **COMMAND[7])
			cmd.request(msg,'localhost')
			self.wait(cmd)
			off, = cmd.responses()
			hh = int(off[4:6])
			mm = int(off[6:8])
			print("Aux Relay Switch Off time extended until %02d:%02d" % (hh,mm) )
			
			

	def run(self):
		'''Run the client, parsing command line arguments'''
		if   sys.argv[1] == 'aux':
			self.aux_commands(self.args)
		elif sys.argv[1] == 'roof':
			self.roof_commands(self.args)
		else:
			pass



class Command(Alarmable):

	# Command retry
	RETRIES = 2
	TIMEOUT = 4


	def __init__(self, server, **kargs):
		self.parent   = server
		self.name     = kargs['name']
		self.resPat   = [ re.compile(p) for p in kargs['resPat'] ]
		self.indexRes = 0
		self.NRetries = Command.RETRIES
	

	# --------------
	# Helper methods
	# --------------

	def sendMessage(self, message):
		'''
		Do the actual sending of message to EMA and associated 
		timeout bookeeping
		'''
		self.resetAlarm()
		n = Command.TIMEOUT
		self.setTimeout(n)
		self.parent.addAlarmable(self)
		self.parent.udpdriver.write(message, self.origin)

	# --------------
	# Main interface
	# --------------

	def request(self, message, origin):
		'''Send a request to EMA through UDP'''
		log.info("-> %s [%s]", message, self.name)
		self.origin  = origin
		self.message = message
		self.retries = 0
		self.indexRes= 0
		self.resmsgs  = []
		self.resetAlarm()       
		self.parent.addExternal(self)
		self.sendMessage(message)
		
		
	def onResponseDo(self, message):
		'''Message event handler, handle response from EMA'''
		matched = self.resPat[self.indexRes].search(message)
		if matched:
			self.resetAlarm()
			self.retries = 0
			self.resmsgs.append(message)
			if  self.indexRes == len(self.resPat)-1:
				log.info("<- %s [OK]", message)
				self.parent.delAlarmable(self)
				self.parent.delExternal(self)
			else:
				log.info("<- %s [awaiting for more]", message)
				self.indexRes += 1
		return matched is not None


	def onTimeoutDo(self):
		'''Timeout event handler'''
		if self.retries < self.NRetries:
			self.retries += 1
			self.sendMessage(self.message)
			log.info(">< %s [Timeout, retrying ...]", self.message)
		else:	# to END state
			self.parent.delExternal(self)
			log.error(">< %s [Timeout, NOK]", self.message)
	

	def status(self):
		'''
		Returns a tuple of flags (cmdDone,Timeout)
		(False, False) -> command pending execution
		(False, True ) -> command terminated by timeout
		(True , False) -> command terminated ok	
		(True , True ) -> should never happen
		'''
		return  ( self.indexRes == len(self.resPat)-1 and self.resmsgs != [], self.retries >= self.NRetries )

	def responses(self):
		return tuple(self.resmsgs)


ema.logger.globalLevel(LOGLEVEL)	
ema.logger.logToConsole()
client = EMAClient()
client.run()

	

	

