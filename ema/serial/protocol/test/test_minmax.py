# ----------------------------------------------------------------------
# Copyright (C) 2016 by Rafael Gonzalez 
#
#  See the LICENSE file.
# ----------------------------------------------------------------------

from __future__ import division


#--------------------
# System wide imports
# -------------------

import datetime

# ---------------
# Twisted imports
# ---------------

from twisted.trial    import unittest
from twisted.test     import proto_helpers
from twisted.internet import task, error
from twisted.logger   import Logger, LogLevel
from twisted.internet.defer import inlineCallbacks


#--------------
# local imports
# -------------

from ..base      import EMAProtocol, EMAProtocolFactory
from  ....logger import setLogLevel


class TestEMAProtocol1(unittest.TestCase):

    BULK_DUMP = [
        '(CAP 001 982 10150 09329 0000 0000 009 04140 +183 653 +112 0000 000 0000 230 M0300)',
        '(CAP 001 931 10144 09324 0000 0000 008 03518 +176 628 +110 0000 000 0000 224 m0300)',
        '(00:59:56 25/05/2016)',
        '(CAP 001 999 10151 09328 0000 0000 009 04360 +176 692 +112 0000 000 0004 230 M0301)',
        '(CAP 001 954 10145 09323 0000 0000 008 03619 +168 652 +110 0000 000 0000 224 m0301)',
        '(01:59:56 25/05/2016)',
        '(CAP 001 989 10166 09327 0000 0000 009 04757 +117 506 +011 0000 000 0004 177 M0302)',
        '(CAP 001 953 10160 09319 0000 0000 008 04157 +109 479 +009 0000 000 0000 171 m0302)',
        '(02:59:56 03/04/2016)',
        '(CAP 001 996 10164 09323 0000 0000 009 04757 +110 523 +013 0000 000 0000 177 M0303)',
        '(CAO 001 965 10158 09318 0000 0000 008 04185 +105 501 +010 0000 000 0000 171 m0303)',
        '(03:59:51 03/04/2016)',
        '(CAX 001 977 11115 09592 0000 0000 009 04231 +052 560 -031 0000 000 0000 295 M0304)',
        '(CAV 001 903 11107 09584 0000 0000 008 04033 +046 537 -034 0000 000 0000 289 m0304)',
        '(04:59:56 16/01/2016)',
        '(CAV 001 982 11128 09596 0000 0000 009 04469 +047 605 -031 0000 000 0004 295 M0305)',
        '(CAU 001 963 11109 09585 0000 0000 008 03960 +032 550 -038 0000 000 0000 289 m0305)',
        '(05:59:56 16/01/2016)',
        '(CAP 001 999 10205 09377 0000 0000 105 04260 +200 577 +088 0000 000 0000 106 M0306)',
        '(CAO 001 995 10183 09365 0000 0000 008 03969 +170 486 +078 0000 000 0000 100 m0306)',
        '(02:31:26 24/05/2016)',
        '(CAP 001 999 10160 09368 0000 0000 148 30359 +291 386 +136 0000 000 0000 330 M0307)',
        '(CAO 001 960 10133 09339 0000 0000 008 03515 +268 316 +091 0000 000 0000 230 m0307)',
        '(20:52:51 10/06/2016)',
        '(CAP 001 999 10166 09364 0000 0000 161 30294 +269 359 +105 0000 000 0004 241 M0308)',
        '(CAO 001 943 10158 09361 0000 0000 008 30087 +254 338 +083 0000 000 0000 171 m0308)',
        '(23:27:35 13/06/2016)',
        '(CAR 001 999 10119 09302 0000 0000 224 53585 +193 569 +094 0000 000 0014 289 M0309)',
        '(CAO 001 999 10097 09283 0000 0000 133 42126 +180 504 +080 0000 000 0000 000 m0309)',
        '(09:59:55 15/06/2016)',
        '(CAT 001 999 10119 09302 0000 0000 249 52398 +192 563 +093 0000 000 0014 348 M0310)',
        '(CAR 001 999 10098 09284 0000 0000 008 51306 +180 486 +077 0000 000 0000 059 m0310)',
        '(10:59:55 15/06/2016)',
        '(CAU 001 999 10118 09304 0000 0000 037 53576 +199 504 +082 0000 000 0019 277 M0311)',
        '(CAS 001 983 10085 09274 0000 0000 008 51760 +187 444 +072 0000 000 0000 088 m0311)',
        '(11:59:55 15/06/2016)',
        '(CAT 001 999 10115 09301 0000 0000 065 54473 +207 468 +080 0000 000 0023 318 M0312)',
        '(CAS 001 999 10083 09274 0000 0000 011 51793 +193 395 +064 0000 000 0000 088 m0312)',
        '(12:59:55 15/06/2016)',
        '(CAT 001 999 10113 09299 0000 0000 060 54474 +205 430 +069 0000 000 0028 336 M0313)',
        '(CAS 001 999 10071 09263 0000 0000 008 51631 +194 388 +055 0000 000 0000 000 m0313)',
        '(13:59:55 15/06/2016)',
        '(CAS 001 999 10098 09287 0000 0000 028 52911 +207 436 +074 0000 000 0028 324 M0314)',
        '(CAS 001 962 10075 09266 0000 0000 008 51428 +200 392 +062 0000 000 0000 041 m0314)',
        '(14:59:55 15/06/2016)',
        '(CAS 001 999 10099 09289 0000 0000 025 52780 +206 446 +077 0000 000 0038 360 M0315)',
        '(CAR 001 942 10073 09264 0000 0000 008 51005 +199 410 +069 0000 000 0000 023 m0315)',
        '(15:59:55 15/06/2016)',
        '(CAS 001 999 10095 09284 0000 0000 029 52123 +203 428 +072 0000 000 0052 360 M0316)',
        '(CAR 001 944 10074 09264 0000 0000 008 51151 +196 393 +057 0000 000 0000 000 m0316)',
        '(16:59:55 15/06/2016)',
        '(CAR 001 999 10302 09488 0000 0000 023 51782 +198 526 +084 0000 000 0028 295 M0317)',
        '(CAR 001 999 10079 09268 0000 0000 008 48914 +182 412 +062 0000 000 0000 023 m0317)',
        '(17:59:55 15/06/2016)',
        '(CAR 001 999 10098 09284 0000 0000 015 51399 +200 526 +091 0000 000 0014 206 M0318)',
        '(CAR 001 927 10081 09271 0000 0000 008 44053 +183 485 +081 0000 000 0000 188 m0318)',
        '(18:59:55 15/06/2016)',
        '(CAQ 001 999 10110 09292 0000 0000 009 30385 +175 543 +081 0000 000 0000 194 M0319)',
        '(CAQ 001 965 10104 09285 0000 0000 008 30025 +171 526 +076 0000 000 0000 188 m0319)',
        '(20:15:22 15/06/2016)',
        '(CAQ 001 999 10114 09296 0000 0000 009 30027 +177 624 +095 0000 000 0004 200 M0320)',
        '(CAQ 001 981 10108 09289 0000 0000 008 07036 +165 517 +075 0000 000 0000 188 m0320)',
        '(20:59:55 15/06/2016)',
        '(CAQ 001 999 10118 09299 0000 0000 009 30010 +181 532 +084 0000 000 0004 200 M0321)',
        '(CAQ 001 898 10109 09292 0000 0000 008 03601 +170 497 +065 0000 000 0000 194 m0321)',
        '(21:59:55 15/06/2016)',
        '(CAQ 001 940 10151 09335 0000 0000 009 04883 +197 574 +106 0000 000 0004 230 M0322)',
        '(CAP 001 926 10145 09329 0000 0000 008 03809 +191 543 +101 0000 000 0000 206 m0322)',
        '(22:59:56 24/05/2016)',
        '(CAQ 001 946 10151 09334 0000 0000 009 04161 +191 628 +111 0000 000 0004 230 M0323)',
        '(CAP 001 928 10146 09327 0000 0000 008 03419 +183 574 +105 0000 000 0000 224 m0323)',
        '(23:59:56 24/05/2016)',
    ]


    RESULT =   [
        [
            datetime.datetime(2016, 5, 25, 0, 59, 56),
            ['Closed', 'Closed', 8.0, 0.1, 98.2, 932.9, 1015.0, 0.0, 0, 0.9, 4.14, 18.3, 65.3, 11.200, 0.0, 0, 230], 
            ['Closed', 'Closed', 8.0, 0.1, 93.10, 932.4, 1014.4, 0.0, 0, 0.8, 3.518, 17.6, 62.8, 11.0, 0.0, 0, 224], 
        ], 
        [
            datetime.datetime(2016, 5, 25, 1, 59, 56),
            ['Closed', 'Closed', 8.0, 0.1, 99.9, 932.8, 1015.1, 0.0, 0, 0.9, 4.36, 17.6, 69.2, 11.200, 0.4, 0, 230], 
            ['Closed', 'Closed', 8.0, 0.1, 95.4, 932.3, 1014.5, 0.0, 0, 0.8, 3.619, 16.8, 65.2, 11.0, 0.0, 0, 224], 
        ], 
        [
            datetime.datetime(2016, 4, 3, 2, 59, 56),
            ['Closed', 'Closed', 8.0, 0.1, 98.9, 932.7, 1016.6, 0.0, 0, 0.9, 4.757, 11.700, 50.6, 1.1, 0.4, 0, 177], 
            ['Closed', 'Closed', 8.0, 0.1, 95.30, 931.9, 1016.0, 0.0, 0, 0.8, 4.157, 10.9, 47.9, 0.9, 0.0, 0, 171], 
        ], 
        [
            datetime.datetime(2016, 4, 3, 3, 59, 51),
            ['Closed', 'Closed', 8.0, 0.1, 99.60, 932.3, 1016.4, 0.0, 0, 0.9, 4.757, 11.0, 52.3, 1.3, 0.0, 0, 177], 
            ['Closed', 'Closed', 7.9, 0.1, 96.5, 931.8, 1015.8, 0.0, 0, 0.8, 4.185, 10.5, 50.1, 1.0, 0.0, 0, 171], 
        ], 
        [
            datetime.datetime(2016, 1, 16, 4, 59, 56),
            ['Closed', 'Closed', 8.8, 0.1, 97.7, 959.2, 1111.5, 0.0, 0, 0.9, 4.231, 5.2, 56.0, -3.1, 0.0, 0, 295], 
            ['Closed', 'Closed', 8.6, 0.1, 90.30, 958.4, 1110.7, 0.0, 0, 0.8, 4.033, 4.6, 53.7, -3.40, 0.0, 0, 289], 
        ], 
        [
            datetime.datetime(2016, 1, 16, 5, 59, 56),
            ['Closed', 'Closed', 8.6, 0.1, 98.2, 959.6, 1112.8, 0.0, 0, 0.9, 4.469, 4.7, 60.5, -3.1, 0.4, 0, 295], 
            ['Closed', 'Closed', 8.5, 0.1, 96.30, 958.5, 1110.9, 0.0, 0, 0.8, 3.96, 3.2, 55.0, -3.8, 0.0, 0, 289], 
        ], 
        [
            datetime.datetime(2016, 5, 24, 2, 31, 26),
            ['Closed', 'Closed', 8.0, 0.1, 99.9, 937.7, 1020.5, 0.0, 0, 10.5, 4.26, 20.0, 57.7, 8.8, 0.0, 0, 106], 
            ['Closed', 'Closed', 7.9, 0.1, 99.5, 936.5, 1018.3, 0.0, 0, 0.8, 3.969, 17.0, 48.6, 7.800, 0.0, 0, 100], 
        ], 
        [
            datetime.datetime(2016, 6, 10, 20, 52, 51),
            ['Closed', 'Closed', 8.0, 0.1, 99.9, 936.8, 1016.0, 0.0, 0, 14.8, 359.0, 29.1, 38.6, 13.600, 0.0, 0, 330], 
            ['Closed', 'Closed', 7.9, 0.1, 96.0, 933.9, 1013.3, 0.0, 0, 0.8, 3.515, 26.8, 31.6, 9.1, 0.0, 0, 230], 
        ], 
        [
            datetime.datetime(2016, 6, 13, 23, 27, 35),
            ['Closed', 'Closed', 8.0, 0.1, 99.9, 936.4, 1016.6, 0.0, 0, 16.1, 294.0, 26.90, 35.9, 10.5, 0.4, 0, 241], 
            ['Closed', 'Closed', 7.9, 0.1, 94.30, 936.1, 1015.8, 0.0, 0, 0.8, 87.0, 25.40, 33.8, 8.3, 0.0, 0, 171], 
        ], 
        [
            datetime.datetime(2016, 6, 15, 9, 59, 55),
            ['Closed', 'Closed', 8.200, 0.1, 99.9, 930.2, 1011.9, 0.0, 0, 22.40, 358500.0, 19.3, 56.9, 9.4, 1.4000, 0, 289], 
            ['Closed', 'Closed', 7.9, 0.1, 99.9, 928.3, 1009.7, 0.0, 0, 13.3, 21260.0, 18.0, 50.4, 8.0, 0.0, 0, 0], 
        ], 
        [
            datetime.datetime(2016, 6, 15, 10, 59, 55),
            ['Closed', 'Closed', 8.4, 0.1, 99.9, 930.2, 1011.9, 0.0, 0, 24.90, 239800.0, 19.2, 56.3, 9.3, 1.4000, 0, 348], 
            ['Closed', 'Closed', 8.200, 0.1, 99.9, 928.4, 1009.8, 0.0, 0, 0.8, 130600.0, 18.0, 48.6, 7.7, 0.0, 0, 59], 
        ], 
        [
            datetime.datetime(2016, 6, 15, 11, 59, 55),
            ['Closed', 'Closed', 8.5, 0.1, 99.9, 930.4, 1011.8, 0.0, 0, 3.7, 357600.0, 19.90, 50.4, 8.200, 1.9000, 0, 277], 
            ['Closed', 'Closed', 8.3, 0.1, 98.30, 927.4, 1008.5, 0.0, 0, 0.8, 176000.0, 18.7, 44.4, 7.2, 0.0, 0, 88], 
        ], 
        [
            datetime.datetime(2016, 6, 15, 12, 59, 55),
            ['Closed', 'Closed', 8.4, 0.1, 99.9, 930.1, 1011.5, 0.0, 0, 6.5, 447300.0, 20.7, 46.8, 8.0, 2.3, 0, 318],
            ['Closed', 'Closed', 8.3, 0.1, 99.9, 927.4, 1008.3, 0.0, 0, 1.1, 179300.0, 19.3, 39.5, 6.4, 0.0, 0, 88], 
        ], 
        [
            datetime.datetime(2016, 6, 15, 13, 59, 55),
            ['Closed', 'Closed', 8.4, 0.1, 99.9, 929.9, 1011.3, 0.0, 0, 6.0, 447400.0, 20.5, 43.0, 6.9, 2.8, 0, 336], 
            ['Closed', 'Closed', 8.3, 0.1, 99.9, 926.3, 1007.1, 0.0, 0, 0.8, 163100.0, 19.40, 38.8, 5.5, 0.0, 0, 0], 
        ], 
        [
            datetime.datetime(2016, 6, 15, 14, 59, 55),
            ['Closed', 'Closed', 8.3, 0.1, 99.9, 928.7, 1009.8, 0.0, 0, 2.8, 291100.0, 20.7, 43.6, 7.4, 2.8, 0, 324], 
            ['Closed', 'Closed', 8.3, 0.1, 96.2, 926.6, 1007.5, 0.0, 0, 0.8, 142800.0, 20.0, 39.2, 6.2, 0.0, 0, 41], 
        ], 
        [
            datetime.datetime(2016, 6, 15, 15, 59, 55),
            ['Closed', 'Closed', 8.3, 0.1, 99.9, 928.9, 1009.9, 0.0, 0, 2.5, 278000.0, 20.6, 44.6, 7.7, 3.8, 0, 360], 
            ['Closed', 'Closed', 8.200, 0.1, 94.2, 926.4, 1007.3, 0.0, 0, 0.8, 100500.0, 19.90, 41.0, 6.9, 0.0, 0, 23], 
        ], 
        [
            datetime.datetime(2016, 6, 15, 16, 59, 55),
            ['Closed', 'Closed', 8.3, 0.1, 99.9, 928.4, 1009.5, 0.0, 0, 2.90, 212300.0, 20.3, 42.8, 7.2, 5.2, 0, 360], 
            ['Closed', 'Closed', 8.200, 0.1, 94.4, 926.4, 1007.4, 0.0, 0, 0.8, 115100.0, 19.6, 39.3, 5.7, 0.0, 0, 0], 
        ], 
        [
            datetime.datetime(2016, 6, 15, 17, 59, 55),
            ['Closed', 'Closed', 8.200, 0.1, 99.9, 948.8, 1030.2, 0.0, 0, 2.3, 178200.0, 19.8, 52.6, 8.4, 2.8, 0, 295], 
            ['Closed', 'Closed', 8.200, 0.1, 99.9, 926.8, 1007.9, 0.0, 0, 0.8, 89140.0, 18.2, 41.2, 6.2, 0.0, 0, 23], 
        ], 
        [      
            datetime.datetime(2016, 6, 15, 18, 59, 55),
            ['Closed', 'Closed', 8.200, 0.1, 99.9, 928.4, 1009.8, 0.0, 0, 1.5, 139900.0, 20.0, 52.6, 9.1, 1.4000, 0, 206], 
            ['Closed', 'Closed', 8.200, 0.1, 92.7, 927.1, 1008.1, 0.0, 0, 0.8, 40530.0, 18.3, 48.5, 8.1, 0.0, 0, 188], 
        ], 
        [
            datetime.datetime(2016, 6, 15, 20, 15, 22),
            ['Closed', 'Closed', 8.1, 0.1, 99.9, 929.2, 1011.0, 0.0, 0, 0.9, 385.0, 17.5, 54.3, 8.1, 0.0, 0, 194], 
            ['Closed', 'Closed', 8.1, 0.1, 96.5, 928.5, 1010.4, 0.0, 0, 0.8, 25.0, 17.1, 52.6, 7.6, 0.0, 0, 188], 
        ], 
        [
            datetime.datetime(2016, 6, 15, 20, 59, 55),
            ['Closed', 'Closed', 8.1, 0.1, 99.9, 929.6, 1011.4, 0.0, 0, 0.9, 27.0, 17.7, 62.4, 9.5, 0.4, 0, 200], 
            ['Closed', 'Closed', 8.1, 0.1, 98.10, 928.9, 1010.8, 0.0, 0, 0.8, 7.036, 16.5, 51.7, 7.5, 0.0, 0, 188], 
        ], 
        [
            datetime.datetime(2016, 6, 15, 21, 59, 55),
            ['Closed', 'Closed', 8.1, 0.1, 99.9, 929.9, 1011.8, 0.0, 0, 0.9, 10.0, 18.1, 53.2, 8.4, 0.4, 0, 200], 
            ['Closed', 'Closed', 8.1, 0.1, 89.80, 929.2, 1010.9, 0.0, 0, 0.8, 3.601, 17.0, 49.7, 6.5, 0.0, 0, 194],  
        ], 
        [
            datetime.datetime(2016, 5, 24, 22, 59, 56),
            ['Closed', 'Closed', 8.1, 0.1, 94.0, 933.5, 1015.1, 0.0, 0, 0.9, 4.883, 19.7, 57.4, 10.600, 0.4, 0, 230], 
            ['Closed', 'Closed', 8.0, 0.1, 92.60, 932.9, 1014.5, 0.0, 0, 0.8, 3.809, 19.1, 54.3, 10.100, 0.0, 0, 206], 
        ], 
        [
            datetime.datetime(2016, 5, 24, 23, 59, 56),
            ['Closed', 'Closed', 8.1, 0.1, 94.60, 933.4, 1015.1, 0.0, 0, 0.9, 4.161, 19.1, 62.8, 11.100, 0.4, 0, 230], 
            ['Closed', 'Closed', 8.0, 0.1, 92.80, 932.7, 1014.6, 0.0, 0, 0.8, 3.419, 18.3, 57.4, 10.5, 0.0, 0, 224],  
        ]
    ]


    def setUp(self):
        setLogLevel(namespace='serial', levelStr='debug')
        setLogLevel(namespace='protoc', levelStr='debug')
        self.transport = proto_helpers.StringTransport()
        #self.clock     = task.Clock()
        self.factory   = EMAProtocolFactory()
        self.protocol  = self.factory.buildProtocol(0)
        self.transport.protocol = self.protocol
        #EMAProtocol.callLater   = self.clock.callLater
        self.protocol.makeConnection(self.transport)
       
   
    # --------------
    # EMA Bulk Dumps
    # --------------

    def test_getDailyMinMaxDump(self, nretries=0):
        d = self.protocol.getDailyMinMaxDump()
        self.assertEqual(self.transport.value(), '(@H0300)')
        self.transport.clear()
        for data in self.BULK_DUMP:
            self.protocol.dataReceived(data)
        d.addCallback(self.assertEqual, self.RESULT)
        return d
